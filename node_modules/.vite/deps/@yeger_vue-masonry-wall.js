import {
  Fragment,
  createElementBlock,
  createTextVNode,
  defineComponent,
  nextTick,
  normalizeStyle,
  onBeforeUnmount,
  onMounted,
  openBlock,
  ref,
  renderList,
  renderSlot,
  toDisplayString,
  toRefs,
  unref,
  watch
} from "./chunk-SE5EWVSA.js";
import "./chunk-IMAK6PR4.js";

// node_modules/@yeger/vue-masonry-wall/dist/index.mjs
var F = ["data-index"];
var L = defineComponent({
  __name: "masonry-wall",
  props: {
    columnWidth: { default: 400 },
    items: null,
    gap: { default: 0 },
    rtl: { type: Boolean, default: false },
    ssrColumns: { default: 0 },
    scrollContainer: { default: null }
  },
  emits: ["redraw", "redrawSkip"],
  setup(a, { emit: m }) {
    const b = a, { columnWidth: g, items: s, gap: r, rtl: h, ssrColumns: w, scrollContainer: y } = toRefs(b), u = ref([]), c = ref();
    function x() {
      const e = Math.floor(
        (c.value.getBoundingClientRect().width + r.value) / (g.value + r.value)
      );
      return e > 0 ? e : 1;
    }
    function C(e) {
      return [...new Array(e)].map(() => []);
    }
    if (w.value > 0) {
      const e = C(w.value);
      s.value.forEach(
        (l, t) => e[t % w.value].push(t)
      ), u.value = e;
    }
    async function k(e) {
      if (e >= s.value.length)
        return;
      await nextTick();
      const l = [...c.value.children];
      h.value && l.reverse();
      const t = l.reduce(
        (i, n) => n.getBoundingClientRect().height < i.getBoundingClientRect().height ? n : i
      );
      u.value[+t.dataset.index].push(e), await k(e + 1);
    }
    async function p(e = false) {
      if (u.value.length === x() && !e) {
        m("redrawSkip");
        return;
      }
      u.value = C(x());
      const l = y == null ? void 0 : y.value, t = l ? l.scrollTop : window.scrollY;
      await k(0), l ? l.scrollBy({ top: t - l.scrollTop }) : window.scrollTo({ top: t }), m("redraw");
    }
    const o = typeof ResizeObserver > "u" ? void 0 : new ResizeObserver(() => p());
    return onMounted(() => {
      p(), o == null || o.observe(c.value);
    }), onBeforeUnmount(() => o == null ? void 0 : o.unobserve(c.value)), watch([s, h], () => p(true)), watch([g, r], () => p()), (e, l) => (openBlock(), createElementBlock("div", {
      ref_key: "wall",
      ref: c,
      class: "masonry-wall",
      style: normalizeStyle({ display: "flex", gap: `${unref(r)}px` })
    }, [
      (openBlock(true), createElementBlock(Fragment, null, renderList(u.value, (t, i) => (openBlock(), createElementBlock("div", {
        key: i,
        class: "masonry-column",
        "data-index": i,
        style: normalizeStyle({
          display: "flex",
          "flex-basis": "0px",
          "flex-direction": "column",
          "flex-grow": 1,
          gap: `${unref(r)}px`,
          height: ["-webkit-max-content", "-moz-max-content", "max-content"],
          "min-width": 0
        })
      }, [
        (openBlock(true), createElementBlock(Fragment, null, renderList(t, (n) => (openBlock(), createElementBlock("div", {
          key: n,
          class: "masonry-item"
        }, [
          renderSlot(e.$slots, "default", {
            item: unref(s)[n],
            index: n
          }, () => [
            createTextVNode(toDisplayString(unref(s)[n]), 1)
          ])
        ]))), 128))
      ], 12, F))), 128))
    ], 4));
  }
});
var U = (() => {
  const a = L;
  return a.install = (m) => {
    m.component("MasonryWall", a);
  }, a;
})();
export {
  U as default
};
//# sourceMappingURL=@yeger_vue-masonry-wall.js.map
